{"version":3,"sources":["Components/TabContainer.js","Components/TypedComponent.js","Components/IntroComponent.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["TabContainer","props","react_default","a","createElement","Container","fixed","maxWidth","children","TypedComponent","options","strings","this","typeSpeed","backSpeed","loop","typed","Typed","el","start","_this","_this$props","variant","align","Typography","ref","PureComponent","useStyle","makeStyles","box","position","top","left","transform","color","textShadow","IntroComponent","classes","Fragment","Box","src","width","className","Components_TypedComponent","ElevationScroll","window","trigger","useScrollTrigger","disableHysteresis","threshold","target","undefined","React","cloneElement","elevation","NavBar","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","scrollTarget","CssBaseline","AppBar","Tabs","onChange","event","newValue","console","log","indicatorColor","centered","Tab","label","Toolbar","Components_IntroComponent","Paper","theme","createMuiTheme","palette","primary","teal","secondary","blue","Boolean","location","hostname","match","ReactDOM","render","MuiThemeProvider","StylesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e79568a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Container, Box } from '@material-ui/core';\r\n\r\nexport default function TabContainer(props) {\r\n    return (\r\n        <Container fixed maxWidth=\"lg\">\r\n                {props.children}\r\n        </Container>\r\n    );\r\n}\r\n\r\nTabContainer.propTypes  = {\r\n    children: PropTypes.node.isRequired,\r\n    style: PropTypes.object\r\n};\r\n\r\n","import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typed from \"typed.js\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nclass TypedComponent extends PureComponent {\r\n  componentDidMount() {\r\n    const { strings } = this.props;\r\n    const options = {\r\n      strings: strings,\r\n      typeSpeed: 50,\r\n      backSpeed: 50,\r\n      loop: true\r\n    };\r\n    this.typed = new Typed(this.el, options);\r\n    this.typed.start();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // this.typed.destroy();\r\n  }\r\n  render() {\r\n\tconst { variant, align } = this.props;\r\n    return (\r\n      <Typography variant={variant} align={align}>\r\n        <span ref={el => (this.el = el)} />\r\n      </Typography>\r\n    );\r\n  }\r\n}\r\n\r\nTypedComponent.propTypes = {\r\n  string: PropTypes.string.isRequired,\r\n  align: PropTypes.string,\r\n  variant: PropTypes.string\r\n};\r\n\r\nexport default TypedComponent;\r\n","import React from \"react\";\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport TypedComponent from \"./TypedComponent\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyle = makeStyles({\r\n  box: {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%)\",\r\n    color: \"white\",\r\n    textShadow: \"2px 2px 5px #aaaaaa\"\r\n  }\r\n});\r\n\r\nfunction IntroComponent() {\r\n  const classes = useStyle();\r\n  return (\r\n    <>\r\n      <Box>\r\n        <img src=\"/Portfolio/images/intro-bg.jpg\" width=\"100%\" />\r\n        <Box className={classes.box}>\r\n          <Typography variant=\"h1\" align=\"center\">\r\n            I am a\r\n          </Typography>\r\n          <TypedComponent\r\n            strings={[\"Web Developer\", \"AI Developer\", \"Games Developer\"]}\r\n            variant=\"h2\"\r\n            align=\"center\"\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IntroComponent;\r\n","import React, { useState } from \"react\";\r\n//import PropTypes from \"prop-types\";\r\nimport TabContainer from \"./TabContainer\";\r\nimport IntroComponent from \"./IntroComponent\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nimport {\r\n  AppBar,\r\n  Tabs,\r\n  Tab,\r\n  useScrollTrigger,\r\n  Toolbar,\r\n  Paper\r\n} from \"@material-ui/core\";\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children, window } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n    target: window ? window() : undefined\r\n  });\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0\r\n  });\r\n}\r\n\r\nexport default function NavBar(props) {\r\n  const [value, setValue] = useState(0);\r\n  const [scrollTarget, setScrollTarget] = useState(undefined);\r\n\r\n  const scrollToRef = useScrollTrigger({ target: scrollTarget });\r\n  function handleOnChange(event, newValue) {\r\n    setValue(newValue);\r\n    console.log(newValue);\r\n    //console.log(this.tabs.getSelectedIndex(this.tabs.props));\r\n    //scrollToRef(newValue);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <ElevationScroll {...props}>\r\n        <AppBar variant=\"dense\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleOnChange}\r\n            //ref = {ref => (this.tabs = ref)}\r\n            indicatorColor=\"secondary\"\r\n            centered\r\n            variant=\"fullWidth\"\r\n          >\r\n            <Tab label=\"Home\" />\r\n            <Tab label=\"Portfolio\" />\r\n            <Tab label=\"Contact Me\" />\r\n          </Tabs>\r\n        </AppBar>\r\n      </ElevationScroll>\r\n      <Toolbar variant=\"dense\" />\r\n\r\n      <IntroComponent />\r\n      <TabContainer>\r\n        <Paper>Hello World 2</Paper>\r\n      </TabContainer>\r\n      <TabContainer>\r\n        <Paper>Hello World 3</Paper>\r\n      </TabContainer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./Components/NavBar\";\r\nimport { MuiThemeProvider } from \"@material-ui/core\";\r\nimport { StylesProvider } from \"@material-ui/styles\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { blue, teal } from \"@material-ui/core/colors\";\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: teal,\r\n    secondary: blue\r\n  }\r\n});\r\nexport default function App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <StylesProvider>\r\n        <NavBar />\r\n      </StylesProvider>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}